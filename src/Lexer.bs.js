// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnexpectedToken = Caml_exceptions.create("Lexer.UnexpectedToken");

function lex(input) {
  return List.rev(List.fold_left((function (tokens, c) {
                    switch (c) {
                      case 32 :
                          return tokens;
                      case 40 :
                          return List.cons(/* OpenPar */2, tokens);
                      case 41 :
                          return List.cons(/* ClosePar */3, tokens);
                      case 43 :
                          return List.cons(/* Plus */1, tokens);
                      case 33 :
                      case 34 :
                      case 35 :
                      case 36 :
                      case 37 :
                      case 38 :
                      case 39 :
                      case 42 :
                      case 44 :
                          break;
                      case 45 :
                          return List.cons(/* Dash */0, tokens);
                      default:
                        
                    }
                    if (c >= /* "0" */48 && c <= /* "9" */57) {
                      var n = c - 48 | 0;
                      if (!tokens) {
                        return List.cons(/* Num */{
                                    _0: n
                                  }, tokens);
                      }
                      var n$prime = tokens.hd;
                      if (typeof n$prime === "number") {
                        if (n$prime !== 0) {
                          return List.cons(/* Num */{
                                      _0: n
                                    }, tokens);
                        } else {
                          return List.cons(/* Num */{
                                      _0: Math.imul(n, -1)
                                    }, tokens.tl);
                        }
                      } else {
                        return List.cons(/* Num */{
                                    _0: Math.imul(n$prime._0, 10) + n | 0
                                  }, tokens.tl);
                      }
                    }
                    throw {
                          RE_EXN_ID: UnexpectedToken,
                          _1: c,
                          Error: new Error()
                        };
                  }), /* [] */0, List.init(input.length, (function (param) {
                        return Caml_string.get(input, param);
                      }))));
}

exports.UnexpectedToken = UnexpectedToken;
exports.lex = lex;
/* No side effect */
